import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author QTIP
 */
public class MagicGUI extends javax.swing.JFrame {

    /**
     * Creates new form PracticeGUI
     */
    private final JFileChooser FBIOpenUP;

    private final JFileChooser modImage;
    private BufferedImage OGImage;
    private BufferedImage newBI;
    private int[][] pixels;
    private static  File Img1;
    private static File Img2;
    private static int morphcount;
    private static BufferedImage[] images;
    private static PPMReadWrite morphImage;
    public MagicGUI() {
        initComponents();
        FBIOpenUP = new JFileChooser();
        FBIOpenUP.setCurrentDirectory(new File("c:\\Users\\Shannon\\Documents\\NetBeansProjects\\ImageConvert"));
        FBIOpenUP.setFileFilter(new FileNameExtensionFilter("PPM Files", "ppm"));
        FBIOpenUP.setAcceptAllFileFilterUsed(false);

        modImage = new JFileChooser();
        modImage.setCurrentDirectory(new File("c:\\temp"));
        modImage.setFileFilter(new FileNameExtensionFilter("PPM files", "ppm"));


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChooseFileButton1 = new javax.swing.JButton();
        MessageButton1 = new javax.swing.JLabel();
        ChooseFileButton2 = new javax.swing.JButton();
        MessageButton2 = new javax.swing.JLabel();
        ImageFileButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        MagicHolder = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Magic File Thing");

        ChooseFileButton1.setText("Choose Starting Image");
        ChooseFileButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFileButton1ActionPerformed(evt);
            }
        });

        MessageButton1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ChooseFileButton2.setText("Choose Ending Image");
        ChooseFileButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFileButton2ActionPerformed(evt);
            }
        });

        MessageButton2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ImageFileButton.setText("Make Magic");
        ImageFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageFileButtonActionPerformed(evt);
            }
        });

        CloseButton.setText("Close");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Number of Images:");

        jTextField1.setText("0");

        MagicHolder.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                MagicHolderComponentShown(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(MagicHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(ImageFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(ChooseFileButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(ChooseFileButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                .addComponent(MessageButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                                                                                .addComponent(jTextField1))
                                                                        .addComponent(MessageButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(29, 29, 29)
                                                                .addComponent(CloseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(54, 54, 54))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ChooseFileButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MessageButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ChooseFileButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MessageButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ImageFileButton)
                                        .addComponent(CloseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MagicHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        ChooseFileButton1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseFileButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFileButton1ActionPerformed
        // TODO add your handling code here:
        int returnValue = FBIOpenUP.showOpenDialog(this);
        Object[] ok = {"Okay"};
        if (returnValue == JFileChooser.APPROVE_OPTION){
            try{
                OGImage = ImageIO.read(FBIOpenUP.getSelectedFile());
                //Saves the first file
                Img1 = FBIOpenUP.getSelectedFile();

                MessageButton1.setText(FBIOpenUP.getSelectedFile().getName());
            } catch (IOException ioe) {
                MessageButton1.setText("Mission Failed. We'll get'em next time");
                JOptionPane.showOptionDialog(null, "Try again", "Error",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, ok, ok[0]);
            }
        }
        else{
            MessageButton1.setText("No file chosen!");
        }
    }//GEN-LAST:event_ChooseFileButton1ActionPerformed

    private void ChooseFileButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFileButton2ActionPerformed
        // TODO add your handling code here:
        int returnValue = FBIOpenUP.showOpenDialog(this);
        Object[] ok = {"Okay"};
        if (returnValue == JFileChooser.APPROVE_OPTION){
            try{
                OGImage = ImageIO.read(FBIOpenUP.getSelectedFile());
                //Saves the second file
                Img2 = FBIOpenUP.getSelectedFile();

                MessageButton2.setText(FBIOpenUP.getSelectedFile().getName());
            } catch (IOException ioe) {
                MessageButton2.setText("Mission Failed. We'll get'em next time");
                JOptionPane.showOptionDialog(null, "Try again", "Error",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, ok, ok[0]);
            }
        }
        else{
            MessageButton2.setText("No file chosen!");
        }
    }//GEN-LAST:event_ChooseFileButton2ActionPerformed

    private void ImageFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageFileButtonActionPerformed
        // imageToArray();
        //A method to save a file
        //saveImage();
        int check = Integer.parseInt(jTextField1.getText());
        //Your method
        try {
            if((check == (int)check) && !(check <= 1))
            {
                morphcount = check;
                if(Img1 == null || Img2 == null){

                    JOptionPane.showConfirmDialog(null, "Please select files to morph");
                }
                else{
                    MagicHolder.setVisible(true);
                    makeImage();
                }

            }
            else{
                JOptionPane.showConfirmDialog(null, "Invalid number of image morphs requested, please try again");

            }


            //invoke to display morphing window
            //Test test=new Test(images);
        }catch(IOException e){System.out.println("Enter valid PPM file");}


//       MagicHolder m = new MagicHolder(images);
//       m.setVisible(true);


    }//GEN-LAST:event_ImageFileButtonActionPerformed


    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        System.exit(1);
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void MagicHolderComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_MagicHolderComponentShown

    }//GEN-LAST:event_MagicHolderComponentShown
    /* Code that made a png into an array
    private void imageToArray(){
        int width = FBIOpenUP.getWidth();
        int height = FBIOpenUP.getHeight();

        newBI = new BufferedImage(width, height, OGImage.TYPE_INT_RGB);

        pixels = new int[width][height];
        for (int i = 0; i < width; i++)
            for (int j = 0; j < height; j++)
                pixels[i][j] = OGImage.getRGB(i,j);


    }
    */
    private void makeImage()throws IOException{
        /* This is your method, you put the code to generate the GIF file here
            and save it. Then open it up in the MagicHolder class.
        */

        morphImage=new PPMReadWrite(Img1,Img2,morphcount);
        RGBImage[] rgbImages=morphImage.getMorphImages();
        File dir=new File("MorphImages");
         if(dir.exists())
         {
             for(File file: dir.listFiles()) {
                 if (!file.isDirectory())           //Remove all files that is not directory in current directory
                     file.delete();
             }
         }else
         {
             dir.mkdirs();          //create a new directory if not found
         }
        for(int imageCount=0; imageCount<rgbImages.length;imageCount++)
        {
            morphImage.write(rgbImages[imageCount],dir+"/Morph"+imageCount+".ppm");         //write .ppm files to directory
        }


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MagicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MagicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MagicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MagicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MagicGUI().setVisible(true);
            }
        });
    }
    private void makeSomeRoom() throws IOException{
        ChooseFileButton1.setVisible(false);
        ChooseFileButton2.setVisible(false);
        ImageFileButton.setVisible(false);
        MessageButton1.setVisible(false);
        MessageButton2.setVisible(false);
        jLabel1.setVisible(false);
        jTextField1.setVisible(false);
        CloseButton.setVisible(false);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseFileButton1;
    private javax.swing.JButton ChooseFileButton2;
    private javax.swing.JButton CloseButton;
    private javax.swing.JButton ImageFileButton;
    private javax.swing.JLabel MagicHolder;
    private javax.swing.JLabel MessageButton1;
    private javax.swing.JLabel MessageButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
